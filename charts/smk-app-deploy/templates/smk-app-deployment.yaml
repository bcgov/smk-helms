kind: "Deployment"
apiVersion: apps/v1
metadata:
  annotations:
    openshift.io/generated-by: OpenShiftNewApp
  generation: 4
  labels:
    app: {{ .Values.app_name }}
    role: {{ .Values.web_role }}
    name: {{ .Values.app_name }}-dp
    env: {{ .Values.env }}

  name: {{ .Values.app_name }}-dp
spec:
  replicas: 2
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: {{ .Values.app_name }}
    env: {{ .Values.env }}
  strategy:
    activeDeadlineSeconds: 21600
    resources: {}
    rollingParams:
      intervalSeconds: 1
      maxSurge: 25%
      maxUnavailable: 25%
      timeoutSeconds: 600
      updatePeriodSeconds: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        openshift.io/generated-by: OpenShiftNewApp
      labels:
        role: {{ .Values.web_role }}
        app: {{ .Values.app_name }}
        env: {{ .Values.env }}
        deployment: {{ .Values.app_name }}-dp
    spec:
      imagePullSecrets:
        - name: {{ .Values.app_image_pull_secret_params.name }}
      containers:
        - image: "{{ .Values.app_image_pull_secret_params.registry }}:{{ .Values.app_image_pull_secret_params.imagetag }}"
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: {{ .Values.app_port }}
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 7

          name: {{ .Values.app_name }}
          ports:
            - containerPort: {{ .Values.app_port }}
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: {{ .Values.app_port }}
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 7
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File

      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
  test: false
